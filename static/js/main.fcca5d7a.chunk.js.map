{"version":3,"sources":["components/AlertMsg.js","components/Navbar.js","components/TxtForm.js","App.js","reportWebVitals.js","index.js"],"names":["AlertMsg","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capital","msg","Navbar","theme","href","title","id","onClick","toggleTheme","htmlFor","TxtForm","useState","text","setText","heading","rows","onChange","event","target","value","updatedText","document","getElementById","select","execCommand","showAlert","split","length","defaultProps","aboutUs","App","setTheme","setAlert","message","setTimeout","body","style","backgroundColor","colour","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fcca5d7a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function AlertMsg(props) {\r\n  const capital= (word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  \r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capital(props.alert.type)}:  </strong>{props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.theme} bg-${props.theme}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/About\">\r\n                {props.aboutUs}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n\r\n          <div className={`form-check form-switch text-${props.theme === 'light'?'dark':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"switchCheck\"\r\n              onClick={props.toggleTheme}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"switchCheck\">\r\n              Enable dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutUs: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutUs: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TxtForm(props) {\r\n  const [text, setText] = useState(\"Enter your text here to analyze\");\r\n \r\n \r\n  const handelUpCLick = () => {\r\n    \r\n    let updatedText = text.toUpperCase();\r\n    setText(updatedText);\r\n  };\r\n\r\n  const handelLowCLick = () => {\r\n    \r\n    let updatedText = text.toLowerCase();\r\n    setText(updatedText);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    \r\n    setText(event.target.value);\r\n  };\r\n\r\n  const copyTxt = () => {\r\n    var content = document.getElementById(\"Textarea\");\r\n\r\n    content.select();\r\n    document.execCommand(\"copy\");\r\n    props.showAlert(\"Text copied to clipboard\", \"success\");\r\n  };\r\n\r\n  return (\r\n    <> \r\n      \r\n      <div className=\"container my-4\">\r\n        <h1 className={`text-${props.theme === \"light\" ? \"dark\" : \"light\"}`}>\r\n          {props.heading}\r\n        </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"Textarea\"\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n            value={text}\r\n          ></textarea>\r\n          <button className=\"btn btn-primary my-2 mx-1\" onClick={handelUpCLick}>\r\n            Convert to Uppercase\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary my-2 mx-1\"\r\n            onClick={handelLowCLick}\r\n          >\r\n            Convert to Lowercase\r\n          </button>\r\n          <button className=\"btn btn-primary my-2 mx-1\" onClick={copyTxt}>\r\n            Copy Text\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div\r\n        className={`container my-2 text-${\r\n          props.theme === \"light\" ? \"dark\" : \"light\"\r\n        }`}\r\n      >\r\n        <h1>Text Summary</h1>\r\n        <p>\r\n          Your text contains {text.split(\" \").length} words and {text.length}{\" \"}\r\n          caracters\r\n        </p>\r\n      </div>\r\n\r\n      <div\r\n        className={`container text-${\r\n          props.theme === \"light\" ? \"dark\" : \"light\"\r\n        }`}\r\n      >\r\n        <h1>Preview</h1>\r\n        <p>{text ? text : \"You can preview your here\"}</p>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport AlertMsg from \"./components/AlertMsg\";\nimport Navbar from \"./components/Navbar\";\nimport TxtForm from \"./components/TxtForm\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n      document.body.style.backgroundColor = \"#212529\";\n      document.body.style.colour = \"white\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } else {\n      setTheme(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        {/* <Switch> */}\n          \n          {/* <Route exact path=\"/\"> */}\n            <Navbar\n              title=\"Text-Utils\"\n              aboutUs=\"About\"\n              theme={theme}\n              toggleTheme={toggleTheme}\n            />\n            <AlertMsg alert={alert} />\n            <TxtForm\n              heading=\"Enter your text here\"\n              theme={theme}\n              showAlert={showAlert}\n            />\n          {/* </Route> */}\n{/*          \n          <Route exact path=\"/About\">\n            <About />\n          </Route> */}\n        \n        {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}